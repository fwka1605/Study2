filter

{{expression | filter: search: comparator}}

expression:検索対象の配列
search:検索式
comparator：比較オプション

filterフィルターは、指定されたsearch条件で配列expression内の
要素を検索し、マッチするものだけを取り出します。

１．例

<table class="table">
  <tr>
    <th>書名</th><th>価格</th><th>出版社</th><th>刊行日</th>
  </tr>
  <tr ng-repeat="book in books | filter : 'ポケット'">
    <td><a ng-href="http://www.wings.msn.to/index.php/-/A-03/{{book.isbn}}/">
      {{book.title}}</a></td>
    <td>{{book.price}}円</td>
    <td>{{book.publish}}</td>
    <td>{{book.published | date}}</td>
  </tr>
</table>

文字列ポケットを含む要素を抽出する。
プロパティ名を指定していないので、どのプロパティにマッチしても良い。

<tr ng-repeat="book in books | filter : '!ポケット'">
文字列ポケットを含まない要素を抽出する。

<tr ng-repeat="book in books | filter : 'ポケット': true">
<tr ng-repeat="book in books | filter : 'サーブレット＆JSPポケットリファレンス': true">
comparatorにtrueを設定することで、部分一致ではなく、完全一致で検索する
ことができる。


<!--<tr ng-repeat="book in books | filter : { title: '.NET', publish: '日経' }">-->
<!--<tr ng-repeat="book in books | filter : 'ポケット' as filtered">-->

引数searchに文字列を指定した場合には、オブジェクトのすべてのプロパティを操作し、
どこかに一致するものがあれば、これを抽出します。 そこで、より厳密に、検索先の
プロパティを指定したい場合には、引数searchを「プロパティ名:検索文字列」のハッシュ
形式で指定します。
またこの際に、複数のプロパティを指定した場合は、プロパティ間はand条件になる。

２．フィルター結果の件数を表示する

表示件数：{{(books | filter : 'ポケット').length}}件
表示件数：{{filtered.length}}件

３．自作のフィルター

<table class="table">
  <tr>
    <th>書名</th><th>価格</th><th>出版社</th><th>刊行日</th>
  </tr>
  <tr ng-repeat="book in books | filter : myFilter">
    <td><a ng-href="http://www.wings.msn.to/index.php/-/A-03/{{book.isbn}}/">
      {{book.title}}</a></td>
    <td>{{book.price}}円</td>
    <td>{{book.publish}}</td>
    <td>{{book.published | date}}</td>
  </tr>
</table>

angular.module('myApp', [])
  .controller('MyController', ['$scope', function($scope) {
    $scope.books = [
      {
        isbn: '978-4-7741-7078-7',
        title: 'サーブレット＆JSPポケットリファレンス',
        price: 2680,
        publish: '技術評論社',
        published: new Date(2015, 0, 8)
      }
      〜
    ];

    $scope.myFilter = function(value, index) {
      return value.price >= 3000;
    };
  }]);

自作のフィルターを作成するには、以下の条件がある。

１．引数として、現在の要素値(value)とインデックス値(index)を受け取ること。
２．結果配列に現在の要素を残す場合は、戻り値にtrueを返す。

３．独自の比較オプション(comparator)


